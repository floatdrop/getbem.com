extends ../layout.jade

block menu
  +navbar('building')

block title
  title BEM — Building

block head
  link(rel="stylesheet" href="/building.css")

  +og('image', 'http://getbem.com/img/bem_black.png')
  +og('url', 'http://getbem.com/building/')
  +og('title', 'BEM — Building')
  +og('description', 'When you are building up a website that contains more than one page — you will soon feel that storing all CSS in a single `index.css` file is a huge pain. When the file becomes larger than __1000__ lines of code, you won't be able to either effectively navigate it or keep maintaining it.')


block scripts
  script(src="/index.js")

block content

  .grid.grid_fixed
    .grid__row
      .grid__cell-sm.grid__cell-sm_size_12
        +heading('File system', 'building', 'file-system')

  .grid.grid_fixed
    .grid__row
      .grid__cell-xs.grid__cell-xs_size_12.raw-text
        :markdown
          When you are building up a website that contains more than one page — you will soon feel that storing all CSS in a single `index.css` file is a huge pain. When the file becomes larger than __1000__ lines of code, you won't be able to either effectively navigate it or keep maintaining it.

          Things are getting worse when you have a team that makes changes in that single file. You will often get merge conflicts (if you are using VCS). Sometimes styles that depend on each other will appear on the opposite sides of this file.

          And the most painful part is transfering common parts of this file into another (often new) project.

          We propose an easy and intuitive way to structure your BEM CSS code in the filesystem that will solve these problems.

          If you have read the [Naming](/naming/) article, you already know that every independent entity on the website will be represented as a __Block__ with __Elements__ that can have __Modifiers__. Keeping that in mind we will split our `index.css` into multiple CSS files on the filesystem. For each BEM entity we will create some files and place them to their own directories:

    .grid__row
      .grid__cell-sm.grid__cell-sm_size_4.grid__block-cell.raw-text
        .heading.heading_level_3 Blocks

        p Each block will have its own directory and styles file:

        .types
          .types__d_b block/
          .types__f_b   block.css

        p New blocks should have their own directories:

        .types
          .types__d_b block/
          .types__f_b   block.css
          .types__d_b footer/
          .types__f_b   footer.css
      .grid__cell-sm.grid__cell-sm_size_4.grid__element-cell.raw-text
        .heading.heading_level_3 Elements

        p Since elements can't appear outside of the blocks — we will place them in subdirectories of the block directory:

        .types
          .types__d_b block/
          .types__d_e   __element/
          .types__f_e     block__element.css
          .types__f_b   block.css

        p or multiple elements:

        .types
          .types__d_b block/
          .types__d_e   __one/
          .types__f_e     block__one.css
          .types__d_e   __two/
          .types__f_e     block__two.css
          .types__f_b block.css

      .grid__cell-sm.grid__cell-sm_size_4.grid__modifier-cell.raw-text
        .heading.heading_level_3 Modifiers

        p Both blocks and elements can have modifiers, so they can be placed either in the block directory:

        .types
          .types__d_b block/
          .types__d_m   _mod/
          .types__f_m     block_mod_value.css
          .types__f_b block.css

        p or the element subdirectory:

        .types
          .types__d_b block/
          .types__d_e   __element/
          .types__d_m     _mod/
          .types__f_m       block__element_mod.css
          .types__f_e     block__element.css
          .types__f_b   block.css
    .grid__row
      .grid__cell-xs.grid__cell-xs_size_12.raw-text
        :markdown
          <br/>
          Using this structure you will get less merge conflicts and it 'll be quite easy to copy some blocks from one project to another (you just need to copy the entire directory). There is another useful abstraction that will help you to develop libraries of blocks. We call it `Levels` — directories that contain blocks. Quite intuitive thing to do, right?

          ## Levels
    .grid__row
      .grid__cell-sm.grid__cell-sm_size_8.raw-text
        :markdown
          When you have established the styleguide, it is quite nice to have a ready-to-go directory with blocks that can be downloaded to the new project and used as __base__ styles for development. We recommend to create multiple levels for one project. For example, we will have a `base` directory with our style-guided blocks and a `project` directory containing blocks for our project. Blocks in levels can be extended with styles defined in other levels.

          The order of extending is defined by the order of levels (for example, in the build configuration). Since «C» in CSS stands for "Cascading" — concatenation of CSS files in the right order will result in extending the styles.
      .grid__cell-sm.grid__cell-sm_size_4.raw-text
        .types
          | base/
          .types__d_b   header/
          .types__f_b     header.css
          .types__d_b   footer/
          .types__f_b     footer.css
          | project/
          .types__d_b   header/
          .types__f_b     header.css
    .grid__row
      .grid__cell-xs.grid__cell-xs_size_12.raw-text
        :markdown
          ## Building

          After you move your CSS from a single `index.css` file to a hierarchy of separate CSS files you'll probably want to build them back together so your HTML won't be bloated with `<style>` tags.

          We will demonstrate how to build CSS files with [gulpjs](http://gulpjs.com), but feel free to choose your own build tool, because it is quite trivial to concatenate files even using a `bash` script.
    .grid__row
      .grid__cell-sm.grid__cell-sm_size_4.raw-text
        :markdown
          ### 1. Install modules

          ```bash
          npm install gulp -g
          npm install gulp gulp-concat
          ```
      .grid__cell-sm.grid__cell-sm_size_4.raw-text
        :markdown
          ### 2. Create `gulpfile.js`

          ```js
          var gulp = require('gulp');
          var concat = require('gulp-concat');
          var levels = [
            'base/**/*.css',
            'project/**/*.css'
          ];

          gulp.task('build', function () {
              gulp.src(levels)
                  .pipe(concat('index.css'))
                  .pipe(gulp.dest('dist'));
          });
          ```
      .grid__cell-sm.grid__cell-sm_size_4.raw-text
        :markdown
          ### 3. Run the build task

          ```bash
          gulp build
          ```
    .grid__row
      .grid__cell-xs.grid__cell-xs_size_12.raw-text
        br
        :markdown
          Congradulations! You should get the `index.css` file with all styles in the `dist` directory.

          While building CSS is straight forward, JavaScript and Templates is a bit more complex subject. There are some tools that can help you to build projects structured in layers and blocks (like [gulp-bem](https://github.com/floatdrop/gulp-bem)).

          You can look at how this site is built. We are using Jade for templates and [gulp-bem-pack](https://github.com/floatdrop/gulp-bem-pack) for JavaScript. Dive into the site repository — [https://github.com/getbem/getbem.com](https://github.com/getbem/getbem.com).
